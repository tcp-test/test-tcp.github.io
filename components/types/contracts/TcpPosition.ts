/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TcpPositionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_assessLevel"
      | "_cycleTime"
      | "_dataToChain"
      | "_halveTime"
      | "_harvestFee"
      | "_isActive"
      | "_isMiner"
      | "_levelOneLockAmount"
      | "_levelRates"
      | "_secondsRate"
      | "_token"
      | "decimalsUnit"
      | "defaultParent"
      | "getLockAmount"
      | "getParentAddress"
      | "getRecommendAccounts"
      | "getUnlockAmount"
      | "getUserInfo"
      | "getUserUnlockTimeAndAmount"
      | "getUserUnlockTimeAndAmountKeys"
      | "getWaitHarvest"
      | "harvest"
      | "harvestUnlockAmount"
      | "init"
      | "inviteRate"
      | "lock"
      | "lockByMiner"
      | "lockInit"
      | "owner"
      | "relock"
      | "renounceOwnership"
      | "replaceFromAddress"
      | "replaceToAddress"
      | "returnTransferIn"
      | "setAssessLevel"
      | "setDefaultParentAddress"
      | "setHalveTime"
      | "setHarvestFee"
      | "setInviteRate"
      | "setLevelOneLockAmount"
      | "setLevesRate"
      | "setMiner"
      | "setParentAddress"
      | "setReplaceAddress"
      | "transferOwnership"
      | "unlockByTime"
      | "userInfos"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Harvest"
      | "HarvestUnlockAmount"
      | "LevelReward"
      | "LevelUp"
      | "LockPosition"
      | "OwnershipTransferred"
      | "RecommendReward"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_assessLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_cycleTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_dataToChain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_halveTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_harvestFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_isActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_isMiner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_levelOneLockAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_levelRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_secondsRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decimalsUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultParent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLockAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getParentAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecommendAccounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnlockAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserUnlockTimeAndAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserUnlockTimeAndAmountKeys",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWaitHarvest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvestUnlockAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "inviteRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockByMiner",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "relock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replaceFromAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceToAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "returnTransferIn",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssessLevel",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultParentAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setHalveTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHarvestFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInviteRate",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLevelOneLockAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLevesRate",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMiner",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setParentAddress",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReplaceAddress",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockByTime",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfos",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "_assessLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_cycleTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_dataToChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_halveTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_harvestFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_isMiner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_levelOneLockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_levelRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_secondsRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decimalsUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultParent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecommendAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserUnlockTimeAndAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserUnlockTimeAndAmountKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWaitHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestUnlockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inviteRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockByMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockInit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceFromAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnTransferIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssessLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultParentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHalveTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHarvestFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInviteRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLevelOneLockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLevesRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMiner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setParentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReplaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockByTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfos", data: BytesLike): Result;
}

export namespace HarvestEvent {
  export type InputTuple = [_from: AddressLike, _value: BigNumberish];
  export type OutputTuple = [_from: string, _value: bigint];
  export interface OutputObject {
    _from: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HarvestUnlockAmountEvent {
  export type InputTuple = [_from: AddressLike, _value: BigNumberish];
  export type OutputTuple = [_from: string, _value: bigint];
  export interface OutputObject {
    _from: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LevelRewardEvent {
  export type InputTuple = [
    _from: AddressLike,
    _to: AddressLike,
    _value: BigNumberish
  ];
  export type OutputTuple = [_from: string, _to: string, _value: bigint];
  export interface OutputObject {
    _from: string;
    _to: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LevelUpEvent {
  export type InputTuple = [_to: AddressLike, _value: BigNumberish];
  export type OutputTuple = [_to: string, _value: bigint];
  export interface OutputObject {
    _to: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockPositionEvent {
  export type InputTuple = [_from: AddressLike, _value: BigNumberish];
  export type OutputTuple = [_from: string, _value: bigint];
  export interface OutputObject {
    _from: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecommendRewardEvent {
  export type InputTuple = [
    _from: AddressLike,
    _to: AddressLike,
    _value: BigNumberish
  ];
  export type OutputTuple = [_from: string, _to: string, _value: bigint];
  export interface OutputObject {
    _from: string;
    _to: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TcpPosition extends BaseContract {
  connect(runner?: ContractRunner | null): TcpPosition;
  waitForDeployment(): Promise<this>;

  interface: TcpPositionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _assessLevel: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  _cycleTime: TypedContractMethod<[], [bigint], "view">;

  _dataToChain: TypedContractMethod<[], [string], "view">;

  _halveTime: TypedContractMethod<[], [bigint], "view">;

  _harvestFee: TypedContractMethod<[], [bigint], "view">;

  _isActive: TypedContractMethod<[userAddress: AddressLike], [boolean], "view">;

  _isMiner: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  _levelOneLockAmount: TypedContractMethod<[], [bigint], "view">;

  _levelRates: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  _secondsRate: TypedContractMethod<[], [bigint], "view">;

  _token: TypedContractMethod<[], [string], "view">;

  decimalsUnit: TypedContractMethod<[], [bigint], "view">;

  defaultParent: TypedContractMethod<[], [string], "view">;

  getLockAmount: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  getParentAddress: TypedContractMethod<
    [userAddress: AddressLike],
    [string],
    "view"
  >;

  getRecommendAccounts: TypedContractMethod<
    [userAddress: AddressLike],
    [string[]],
    "view"
  >;

  getUnlockAmount: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  getUserInfo: TypedContractMethod<
    [account: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        parentAddress: string;
        harvestTime: bigint;
        lockAmount: bigint;
        harvestAmount: bigint;
        recommendUser: bigint;
        recommendReward: bigint;
        level: bigint;
        levelReward: bigint;
      }
    ],
    "view"
  >;

  getUserUnlockTimeAndAmount: TypedContractMethod<
    [userAddress: AddressLike, unlockTime: BigNumberish],
    [bigint],
    "view"
  >;

  getUserUnlockTimeAndAmountKeys: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint[]],
    "view"
  >;

  getWaitHarvest: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  harvest: TypedContractMethod<[], [void], "payable">;

  harvestUnlockAmount: TypedContractMethod<[], [void], "payable">;

  init: TypedContractMethod<[], [void], "nonpayable">;

  inviteRate: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  lock: TypedContractMethod<
    [msgSender: AddressLike, amount: BigNumberish, parent: AddressLike],
    [void],
    "payable"
  >;

  lockByMiner: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  lockInit: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  relock: TypedContractMethod<[], [void], "payable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  replaceFromAddress: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  replaceToAddress: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  returnTransferIn: TypedContractMethod<
    [con: AddressLike, addr: AddressLike, fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAssessLevel: TypedContractMethod<
    [leves: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setDefaultParentAddress: TypedContractMethod<
    [parent: AddressLike],
    [void],
    "nonpayable"
  >;

  setHalveTime: TypedContractMethod<[time: BigNumberish], [void], "nonpayable">;

  setHarvestFee: TypedContractMethod<
    [rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setInviteRate: TypedContractMethod<
    [rate: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setLevelOneLockAmount: TypedContractMethod<
    [levelOneLockAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLevesRate: TypedContractMethod<
    [levesRate: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setMiner: TypedContractMethod<
    [minerAddress: AddressLike, isMiner: boolean],
    [void],
    "nonpayable"
  >;

  setParentAddress: TypedContractMethod<
    [user: AddressLike, parent: AddressLike],
    [void],
    "nonpayable"
  >;

  setReplaceAddress: TypedContractMethod<
    [from: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlockByTime: TypedContractMethod<
    [recipient: AddressLike, _unlockTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  userInfos: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint] & {
        parentAddress: string;
        harvestTime: bigint;
        lockAmount: bigint;
        harvestAmount: bigint;
        recommendReward: bigint;
        level: bigint;
        levelReward: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_assessLevel"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "_cycleTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_dataToChain"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_halveTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_harvestFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_isActive"
  ): TypedContractMethod<[userAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "_isMiner"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "_levelOneLockAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_levelRates"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "_secondsRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimalsUnit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultParent"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLockAmount"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getParentAddress"
  ): TypedContractMethod<[userAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRecommendAccounts"
  ): TypedContractMethod<[userAddress: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUnlockAmount"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserInfo"
  ): TypedContractMethod<
    [account: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        parentAddress: string;
        harvestTime: bigint;
        lockAmount: bigint;
        harvestAmount: bigint;
        recommendUser: bigint;
        recommendReward: bigint;
        level: bigint;
        levelReward: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserUnlockTimeAndAmount"
  ): TypedContractMethod<
    [userAddress: AddressLike, unlockTime: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserUnlockTimeAndAmountKeys"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getWaitHarvest"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "harvest"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "harvestUnlockAmount"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "inviteRate"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "lock"
  ): TypedContractMethod<
    [msgSender: AddressLike, amount: BigNumberish, parent: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "lockByMiner"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockInit"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "relock"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "replaceFromAddress"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "replaceToAddress"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "returnTransferIn"
  ): TypedContractMethod<
    [con: AddressLike, addr: AddressLike, fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAssessLevel"
  ): TypedContractMethod<[leves: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultParentAddress"
  ): TypedContractMethod<[parent: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHalveTime"
  ): TypedContractMethod<[time: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHarvestFee"
  ): TypedContractMethod<[rate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInviteRate"
  ): TypedContractMethod<[rate: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLevelOneLockAmount"
  ): TypedContractMethod<
    [levelOneLockAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLevesRate"
  ): TypedContractMethod<[levesRate: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMiner"
  ): TypedContractMethod<
    [minerAddress: AddressLike, isMiner: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setParentAddress"
  ): TypedContractMethod<
    [user: AddressLike, parent: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReplaceAddress"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockByTime"
  ): TypedContractMethod<
    [recipient: AddressLike, _unlockTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userInfos"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint] & {
        parentAddress: string;
        harvestTime: bigint;
        lockAmount: bigint;
        harvestAmount: bigint;
        recommendReward: bigint;
        level: bigint;
        levelReward: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "Harvest"
  ): TypedContractEvent<
    HarvestEvent.InputTuple,
    HarvestEvent.OutputTuple,
    HarvestEvent.OutputObject
  >;
  getEvent(
    key: "HarvestUnlockAmount"
  ): TypedContractEvent<
    HarvestUnlockAmountEvent.InputTuple,
    HarvestUnlockAmountEvent.OutputTuple,
    HarvestUnlockAmountEvent.OutputObject
  >;
  getEvent(
    key: "LevelReward"
  ): TypedContractEvent<
    LevelRewardEvent.InputTuple,
    LevelRewardEvent.OutputTuple,
    LevelRewardEvent.OutputObject
  >;
  getEvent(
    key: "LevelUp"
  ): TypedContractEvent<
    LevelUpEvent.InputTuple,
    LevelUpEvent.OutputTuple,
    LevelUpEvent.OutputObject
  >;
  getEvent(
    key: "LockPosition"
  ): TypedContractEvent<
    LockPositionEvent.InputTuple,
    LockPositionEvent.OutputTuple,
    LockPositionEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RecommendReward"
  ): TypedContractEvent<
    RecommendRewardEvent.InputTuple,
    RecommendRewardEvent.OutputTuple,
    RecommendRewardEvent.OutputObject
  >;

  filters: {
    "Harvest(address,uint256)": TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;
    Harvest: TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;

    "HarvestUnlockAmount(address,uint256)": TypedContractEvent<
      HarvestUnlockAmountEvent.InputTuple,
      HarvestUnlockAmountEvent.OutputTuple,
      HarvestUnlockAmountEvent.OutputObject
    >;
    HarvestUnlockAmount: TypedContractEvent<
      HarvestUnlockAmountEvent.InputTuple,
      HarvestUnlockAmountEvent.OutputTuple,
      HarvestUnlockAmountEvent.OutputObject
    >;

    "LevelReward(address,address,uint256)": TypedContractEvent<
      LevelRewardEvent.InputTuple,
      LevelRewardEvent.OutputTuple,
      LevelRewardEvent.OutputObject
    >;
    LevelReward: TypedContractEvent<
      LevelRewardEvent.InputTuple,
      LevelRewardEvent.OutputTuple,
      LevelRewardEvent.OutputObject
    >;

    "LevelUp(address,uint256)": TypedContractEvent<
      LevelUpEvent.InputTuple,
      LevelUpEvent.OutputTuple,
      LevelUpEvent.OutputObject
    >;
    LevelUp: TypedContractEvent<
      LevelUpEvent.InputTuple,
      LevelUpEvent.OutputTuple,
      LevelUpEvent.OutputObject
    >;

    "LockPosition(address,uint256)": TypedContractEvent<
      LockPositionEvent.InputTuple,
      LockPositionEvent.OutputTuple,
      LockPositionEvent.OutputObject
    >;
    LockPosition: TypedContractEvent<
      LockPositionEvent.InputTuple,
      LockPositionEvent.OutputTuple,
      LockPositionEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RecommendReward(address,address,uint256)": TypedContractEvent<
      RecommendRewardEvent.InputTuple,
      RecommendRewardEvent.OutputTuple,
      RecommendRewardEvent.OutputObject
    >;
    RecommendReward: TypedContractEvent<
      RecommendRewardEvent.InputTuple,
      RecommendRewardEvent.OutputTuple,
      RecommendRewardEvent.OutputObject
    >;
  };
}
