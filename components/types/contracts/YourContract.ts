/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface YourContractInterface extends Interface {
  getFunction(nameOrSignature: "purpose" | "setPurpose"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SetPurpose"): EventFragment;

  encodeFunctionData(functionFragment: "purpose", values?: undefined): string;
  encodeFunctionData(functionFragment: "setPurpose", values: [string]): string;

  decodeFunctionResult(functionFragment: "purpose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPurpose", data: BytesLike): Result;
}

export namespace SetPurposeEvent {
  export type InputTuple = [sender: AddressLike, purpose: string];
  export type OutputTuple = [sender: string, purpose: string];
  export interface OutputObject {
    sender: string;
    purpose: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface YourContract extends BaseContract {
  connect(runner?: ContractRunner | null): YourContract;
  waitForDeployment(): Promise<this>;

  interface: YourContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  purpose: TypedContractMethod<[], [string], "view">;

  setPurpose: TypedContractMethod<[newPurpose: string], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "purpose"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setPurpose"
  ): TypedContractMethod<[newPurpose: string], [void], "payable">;

  getEvent(
    key: "SetPurpose"
  ): TypedContractEvent<
    SetPurposeEvent.InputTuple,
    SetPurposeEvent.OutputTuple,
    SetPurposeEvent.OutputObject
  >;

  filters: {
    "SetPurpose(address,string)": TypedContractEvent<
      SetPurposeEvent.InputTuple,
      SetPurposeEvent.OutputTuple,
      SetPurposeEvent.OutputObject
    >;
    SetPurpose: TypedContractEvent<
      SetPurposeEvent.InputTuple,
      SetPurposeEvent.OutputTuple,
      SetPurposeEvent.OutputObject
    >;
  };
}
